def matrix_divided(matrix, div):
    """
    Divide all elements of a matrix by a divisor.

    Args:
        matrix (list): A list of lists consisting of ints or floats.
        div (int or float): The divisor.

    Returns:
        list: A new matrix with elements divided by the divisor (rounded to two decimal places).

    Raises:
        TypeError: If the input matrix is not a list of lists of ints or floats, or if rows have different sizes.
        TypeError: If the divisor (div) is not an int or float.
        ZeroDivisionError: If the divisor is zero.
    """
    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    if not matrix or any(len(row) != len(matrix[0]) for row in matrix):
        raise TypeError("Each row of the matrix must have the same size")

    if not isinstance(div, (int, float)):
        raise TypeError("div must be a number")

    if div == 0:
        raise ZeroDivisionError("division by zero")

    return [[round(element / div, 2) for element in row] for row in matrix]
